name: Update and Validate Rules

on:
  push:
    branches: [ main ]
  pull_request:
    paths:
      - 'clash/rule/*.yaml'
      - 'loon/rule/*.list'
      - 'Egern/rule/*.yaml'
jobs:
  validate-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 转换步骤（确保缩进正确）
      - name: Convert Loon → Clash
        run: |
          echo "当前目录: $(pwd)"
          echo "Loon规则文件列表:"
          ls -R loon/rule/

          mkdir -p clash/rule
          # 确保脚本目录存在
          mkdir -p scripts  

          python convert_loon_to_clash.py \
            --input 'loon/rule/*.list' \
            --output 'clash/rule/clash-converted.yaml'

          echo "生成文件检查:"
          ls -l clash/rule/
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install pyyaml
        
      - name: Convert Loon → Egern
        run: |
          mkdir -p $GITHUB_WORKSPACE/Egern/rule
          python convert_loon_to_egern.py \
            --input $GITHUB_WORKSPACE/loon/rule \
            --output $GITHUB_WORKSPACE/Egern/rule



      # 验证 Clash 规则（作为独立步骤）
      - name: Validate Clash Rules
        run: |
          echo "开始验证 Clash 规则..."
          if [ -f clash/rule/clash-converted.yaml ]; then
            echo "检测到新生成的 Clash 文件，开始验证..."
            # 使用您的验证逻辑，例如：
            # python validate_clash.py clash/rule/*.yaml
            echo "验证通过！"  # 临时占位
          else
            echo "未找到 Clash 规则文件，跳过验证。"
          fi

      # 验证 Loon 规则（作为独立步骤）
      - name: Validate Loon Rules
        run: |
          echo "开始验证 Loon 规则..."
          if [ -d "loon/rule" ]; then
            files=$(ls loon/rule/*.list)
            if [ -n "$files" ]; then
              echo "检测到 Loon 规则文件：$files"
              # 使用您的验证逻辑，例如：
              # python validate_loon.py loon/rule/*.list
              echo "验证通过！"  # 临时占位
            else
              echo "Loon 文件夹为空，跳过验证。"
            fi
          else
            echo "Loon 目录不存在，跳过验证。"
          fi
      - name: Generate README.md for second-level folders
        run: |
          for topdir in clash loon Egern surge quanx; do
            if [ -d "$topdir" ]; then
              # 为顶级目录下的所有一级子目录生成 README.md
              find "$topdir" -mindepth 1 -maxdepth 1 -type d | while read subdir; do
                readme="$subdir/README.md"
                : > "$readme"
                for file in "$subdir"/*; do
                  if [ -f "$file" ] && [ "$(basename "$file")" != "README.md" ]; then
                    relpath=$(echo "$file" | sed 's/^.\///')
                    echo "https://raw.githubusercontent.com/Lucasss1916/AgentSoftware/main/$relpath" >> "$readme"
                  fi
              done
            done
          fi
          done
          
      - name: Commit Changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add loon/rule/
          git add clash/rule/
          git add Egern/rule/
          git diff --cached --quiet || git commit -m "自动更新规则文件（Loon → Clash + Egern）"
          git push origin main
